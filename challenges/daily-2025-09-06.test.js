const assert = require('node:assert').strict;

const daily = (matrix) => {
    const rows = matrix.length;

    for (let i = 0; i < rows; i++) {
        if (matrix[i].length !== rows) throw new Error('Invalid matrix');

        for (let j = 0; j < i; j++) {
            const temp = matrix[i][j];

            matrix[i][j] = matrix[j][i];
            matrix[j][i] = temp;
        }
    }

    for (let i = 0; i < rows; i++) {
        matrix[i] = matrix[i].reverse();
    }

    return matrix;
};

assert.deepStrictEqual(daily([
    [1],
]), [
    [1],
]);

assert.deepStrictEqual(daily([
    [1, 2],
    [3, 4],
]), [
    [3, 1],
    [4, 2],
]);

assert.deepStrictEqual(daily([
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]), [
    [7, 4, 1],
    [8, 5, 2],
    [9, 6, 3],
]);

assert.deepStrictEqual(daily([
    [0, 1, 0],
    [1, 0, 1],
    [0, 0, 0],
]), [
    [0, 1, 0],
    [0, 0, 1],
    [0, 1, 0],
]);

assert.deepStrictEqual(daily([
    [10, 11, 12, 13, 14],
    [15, 16, 17, 18, 19],
    [20, 21, 22, 23, 24],
    [25, 26, 27, 28, 29],
    [30, 31, 32, 33, 34],
]), [
    [30, 25, 20, 15, 10],
    [31, 26, 21, 16, 11],
    [32, 27, 22, 17, 12],
    [33, 28, 23, 18, 13],
    [34, 29, 24, 19, 14],
]);

assert.deepStrictEqual(daily([
    ['x101', 'x102', 'x103', 'x104', 'x105', 'x106', 'x107', 'x108', 'x109', 'x110'],
    ['x111', 'x112', 'x113', 'x114', 'x115', 'x116', 'x117', 'x118', 'x119', 'x120'],
    ['x121', 'x122', 'x123', 'x124', 'x125', 'x126', 'x127', 'x128', 'x129', 'x130'],
    ['x131', 'x132', 'x133', 'x134', 'x135', 'x136', 'x137', 'x138', 'x139', 'x140'],
    ['x141', 'x142', 'x143', 'x144', 'x145', 'x146', 'x147', 'x148', 'x149', 'x150'],
    ['x151', 'x152', 'x153', 'x154', 'x155', 'x156', 'x157', 'x158', 'x159', 'x160'],
    ['x161', 'x162', 'x163', 'x164', 'x165', 'x166', 'x167', 'x168', 'x169', 'x170'],
    ['x171', 'x172', 'x173', 'x174', 'x175', 'x176', 'x177', 'x178', 'x179', 'x180'],
    ['x181', 'x182', 'x183', 'x184', 'x185', 'x186', 'x187', 'x188', 'x189', 'x190'],
    ['x191', 'x192', 'x193', 'x194', 'x195', 'x196', 'x197', 'x198', 'x199', 'x200'],
]), [
    ['x191', 'x181', 'x171', 'x161', 'x151', 'x141', 'x131', 'x121', 'x111', 'x101'],
    ['x192', 'x182', 'x172', 'x162', 'x152', 'x142', 'x132', 'x122', 'x112', 'x102'],
    ['x193', 'x183', 'x173', 'x163', 'x153', 'x143', 'x133', 'x123', 'x113', 'x103'],
    ['x194', 'x184', 'x174', 'x164', 'x154', 'x144', 'x134', 'x124', 'x114', 'x104'],
    ['x195', 'x185', 'x175', 'x165', 'x155', 'x145', 'x135', 'x125', 'x115', 'x105'],
    ['x196', 'x186', 'x176', 'x166', 'x156', 'x146', 'x136', 'x126', 'x116', 'x106'],
    ['x197', 'x187', 'x177', 'x167', 'x157', 'x147', 'x137', 'x127', 'x117', 'x107'],
    ['x198', 'x188', 'x178', 'x168', 'x158', 'x148', 'x138', 'x128', 'x118', 'x108'],
    ['x199', 'x189', 'x179', 'x169', 'x159', 'x149', 'x139', 'x129', 'x119', 'x109'],
    ['x200', 'x190', 'x180', 'x170', 'x160', 'x150', 'x140', 'x130', 'x120', 'x110'],
]);

assert.throws(() => daily([
    ['a', 'b', 'c'],
    ['d', 'e', 'f'],
    ['g', 'h'],
]), /Invalid matrix/);

assert.throws(() => daily([
    ['a', 'b', 'c'],
    ['d', 'e', 'f'],
    ['g', 'h', 'i', 'j'],
]), /Invalid matrix/);

assert.throws(() => daily([
    ['a', 'b', 'c'],
    ['d', 'f'],
    ['g', 'h', 'i'],
]), /Invalid matrix/);

assert.throws(() => daily([
    ['b', 'c'],
    ['d', 'e', 'f'],
    ['g', 'h', 'i'],
]), /Invalid matrix/);